# Project: Basic Algorithms

## Problem1: Finding the Square Root of an Integer
  The algorithm utilizes and performs binary search in the range of 1 to the given number,
finds the middle value then check whether `middle ** 2` is less than or equal to `number` in 
each iteration. If it is, update the return value then continue searching in the right half, 
the final result is the floored squared root of the given number.
  The binary search results in O(logn) time complexity. Space complexity is O(1) since the 
algorithm only stores some integers in `start`, `end`, `result` and does not depends on the 
size of the given number.


## Problem2: Search in a Rotated Sorted Array
  The algorithm utilizes modified binary search to ensure a time complexity of O(logn). It 
calculate the middle index in each iteration of the while loop, then check if the left or 
right half of the input list is sorted by comparing start and end number of that half. 
Depending on whether the left or right half is sorted, we adjust the pointers `start` and 
`end` accordingly to continue the binary search in the sorted half where the target might be 
located.
  The space complexity is O(1) as in problem 1 because the algorithm performance does not 
depends on the size of the input list.


## Problem3: Rearrange Array Digits
  The algorithm utilizes merge sort algorithm to first sort the input list in descending 
order. Then it adds the array number elements into the two resulting number `num1` and 
`num2` alternatively. Eventually, it returns a list containing those two numbers.
  The use of merge sort algorithm ensure a time complexity of O(nlogn) and a space complexity
of O(n).


## Problem4: Dutch National Flag Problem
  The algorithm is implemented by traversing the input list and swapping numbers by pushing
the 0s towards the beginning and 2s towards the end of the list.
  
  We first initialize three pointers: red, white, blue (Dutch national flag colors), 
representing the positions where 0s, 1s and 2s should be placed in the list, respectively. 
The blue equals `len(list) - 1` initially indicating the rightmost position where the next 
2 should be placed. We then traverse the list once using the white pointer. At each position, 
we evaluate the value at the position of the white pointer then:
  - If element at white is 0 (supposed to be at the beginning of the list), swap it with the 
element at the red pointer and increase both red and white pointers.
  - If element at white is 1 (is at correct position), move on to the next element.
  - If element at white is 2 (supposed to be at the end of the list), swap it with the element 
at the blue pointer and decrease the blue pointer.

  Since we only traverse the list once, the time complexity is O(n) where n is the length 
of the list. The space complexity is of O(1) as it sorts in place and uses constant amount 
of memory for storing input list and three pointers only.


## Problem5: Autocomplete with Tries


## Problem6: Unsorted Integer Array
  The algorithm first initialize `min` and `max` to the first element of the list. Then it 
traverse the list once, comparing each element with the current min and max values, if the 
current element is:
  - less than the current `min`, update `min` to the current element
  - greater than the current `max`, update `max` to the current element 
  After iteration, `min` and `max` are now the minimum and maximum values of the given list, 
respectively.
  Since we traverse the array only once, the time complexity is O(n) where n is the size of 
the input list. The space complexity is O(1) as the algorithm only use a couple of auxiliaries.

## Problem7: Request Routing in a Web Server with a Trie

